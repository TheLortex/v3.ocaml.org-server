let module_kind = function
  | `Module _ -> "Module"
  | `ModuleType _ -> "Module type"
  | `FunctorArgument (number, _) -> "Parameter #" ^ (Int.to_string number)

let module_path_kind path =
  match List.fold_left (fun _ v -> Some v) None path with 
  | None -> ""
  | Some v -> module_kind v

let module_name = function
  | `Module name
  | `ModuleType name
  | `FunctorArgument (_, name) -> name

let render module_path =
  let n_items = List.length module_path in
  let _item_class index =
    if index == n_items - 1 then
      "text-orange-600 border-orange-600 border-b-2"
    else
      "hover:text-gray-900 hover:border-gray-400 hover:border-b-2 border-transparent border-b-2"
  in
  let item_href index =
    let rec href_url index =
      if index == n_items - 1 then "" else
      "../" ^ href_url (index + 1)
    in
    if index == n_items - 1 then "" else
    "href='"^(href_url index)^"index.html'"
  in
  <div class="flex pb-4">
    <span class="mr-4 mt-2 text-sm font-light inline-block align-bottom"><%s module_path_kind module_path %></span>
    <% module_path |> List.iteri (fun index item -> %>
    <% if index > 0 then ( %><span class="ml-1">.</span><% ); %>
    <span>
      <a <%s! item_href index %> class="ml-1 text-2xl font-medium text-gray-800 hover:text-black"><%s module_name item %></a>
    </span>
    <% ); %>
  </div>
